{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["channelID","msg","xhr","XMLHttpRequest","open","send","onload","response","JSON","parse","responseText","alert","field1","onerror","el","React","createElement","App","state","num","date","Date","onChange","setState","console","log","handleIncrement","handleDecrement","onClick","this","Calendar","value","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0TAMMA,EAAU,SAGhB,SAASC,IAIT,IAAKC,EAAM,IAAIC,eAIbD,EAAIE,KAAK,MAAO,uCAAuCJ,EAAU,oBAAoB,GAGrFE,EAAIG,OAGJH,EAAII,OAAS,WAEX,IAAIC,EAASC,KAAKC,MAAMP,EAAIQ,cAG5BC,MAAMJ,EAASK,SAKjBV,EAAIW,QAAU,WAAMF,MAAM,wCAI5B,IAAOG,EAAMC,IAAMC,cAgDJC,E,2MA3CbC,MAAO,CACFC,IAAK,EACLC,KAAM,IAAIC,M,EAGbC,SAAW,SAAAF,GAET,EAAKG,SAAU,CAACH,SAChBI,QAAQC,IAAI,EAAKP,Q,EAGrBQ,gBAAkB,WAChBF,QAAQC,IAAI,EAAKP,OAEjB,EAAKK,SAAS,CACZJ,IAAK,EAAKD,MAAMC,IAAI,K,EAKvBQ,gBAAkB,WAEjB,EAAKJ,SAAS,CACZJ,IAAK,EAAKD,MAAMC,IAAI,K,wEAStB,OAAOL,EAAG,MAAM,KACMA,EAAI,SAAU,CAAEc,QAAS3B,GAAM,QAC/Ba,EAAI,SAAU,CAAEc,QAASC,KAAKH,iBAAkB,aAChDZ,EAAI,SAAU,CAAEc,QAASC,KAAKF,iBAAkB,aAChDb,EAAGgB,IAAS,CAAER,SAASO,KAAKP,SAAaS,MAAMF,KAAKX,MAAME,OAC1DN,EAAG,IAAI,KAAKe,KAAKX,MAAMC,U,GAvC/BJ,IAAMiB,WC5BJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.8be8bc0a.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport Iframe from 'react-iframe'\nimport Calendar from 'react-calendar';\n\n//Identificador del canal de ThingSpeak\nconst channelID=\"333785\";\n\n//Función para el botón\nfunction msg() {\n\n\n  //Crea objeto tipo XMLHttpRequest para acceder a ThingSpeak\nvar  xhr = new XMLHttpRequest();\n\n\n  //URL para leer última entrada en el canal de ThingSpeak\n  xhr.open('GET', \"https://api.thingspeak.com/channels/\"+channelID+\"/feeds/last.json\", true);\n\n  //Envía la petición\n  xhr.send();\n\n  //Función que se ejecutará cuando responda el servidor de ThingSpeak\n  xhr.onload = () => {\n    //Crea un objeto JSON con la respuesta del Servidor\n    var response=JSON.parse(xhr.responseText);\n\n    //Muestra en un cuadro de diálogo el valor del campo\n    alert(response.field1);\n\n  };\n\n  //Configura la función que se ejecutará si hay error al conectar servidor de ThingSpeak\n  xhr.onerror = ()=> {alert(\"No puedo conectarme a ThingSpeak :(\")}\n}\n\n\nconst  el =  React.createElement\n\n\nclass App extends React.Component{\n\n  state= {\n       num: 0,\n       date: new Date()\n  }\n\n    onChange = date =>\n    {\n      this.setState( {date} );\n      console.log(this.state);\n  }\n\n  handleIncrement = () =>{\n    console.log(this.state);\n\n    this.setState({\n      num: this.state.num+1\n    })\n\n  }\n\n   handleDecrement = () =>{\n\n    this.setState({\n      num: this.state.num-1\n    })\n\n  }\n\n\n\n\n  render(){\n    return el('div',null,\n                          el( \"button\", { onClick: msg}, \"Leer\"),\n                          el( \"button\", { onClick: this.handleIncrement}, \"Increment\"),\n                          el( \"button\", { onClick: this.handleDecrement}, \"Decrement\"),\n                          el(Calendar,{ onChange:this.onChange,    value:this.state.date}),\n                          el('p',null,this.state.num))\n  }\n\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
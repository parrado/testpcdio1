{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["channelID","frameprops","url","width","height","id","className","display","position","App","state","num","date","Date","isHidden","msg","xhr","XMLHttpRequest","open","send","onload","response","JSON","parse","responseText","alert","field1","onerror","onChange","tempState","setState","console","log","handleIncrement","handleDecrement","handleHideCalendar","onClick","this","value","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4TAWMA,EAAU,SAEVC,EAAW,CACfC,IAAI,gIACJC,MAAM,QACNC,OAAO,QACPC,GAAG,OACHC,UAAU,MACVC,QAAQ,UACRC,SAAS,YAsHMC,E,2MAhHbC,MAAO,CACLC,IAAK,EACLC,KAAM,IAAIC,KACVC,UAAU,G,EAIZC,IAAM,WAGJ,IAAKC,EAAM,IAAIC,eAGfD,EAAIE,KAAK,MAAO,uCAAuClB,EAAU,oBAAoB,GAGrFgB,EAAIG,OAGJH,EAAII,OAAS,WAEX,IAAIC,EAASC,KAAKC,MAAMP,EAAIQ,cAG5BC,MAAMJ,EAASK,SAKjBV,EAAIW,QAAU,WAAMF,MAAM,yC,EAG5BG,SAAW,SAAChB,GAEV,IAAIiB,EAAU,EAAKnB,MACnBmB,EAAUjB,KAAKA,EACf,EAAKkB,SAAU,CAACD,cAChBE,QAAQC,IAAIH,I,EAGdI,gBAAkB,WAChB,IAAIJ,EAAU,EAAKnB,MACnBmB,EAAUlB,IAAIkB,EAAUlB,IAAI,EAC5B,EAAKmB,SAAUD,GACfE,QAAQC,IAAIH,I,EAGdK,gBAAkB,WAChB,IAAIL,EAAU,EAAKnB,MACnBmB,EAAUlB,IAAIkB,EAAUlB,IAAI,EAC5B,EAAKmB,SAAUD,GACfE,QAAQC,IAAIH,I,EAGdM,mBAAqB,WACnB,IAAIN,EAAU,EAAKnB,MACnBmB,EAAUf,UAAUe,EAAUf,SAC9B,EAAKgB,SAAUD,GACfE,QAAQC,IAAIH,I,wEAQZ,OAEE,6BACE,4BAAQvB,UAAU,cAChB,mCACO,4CADP,yBAKF,uBAAGA,UAAU,cACX,4BAAQ8B,QAASC,KAAKtB,KAAtB,iBACA,4BAAQqB,QAASC,KAAKF,oBAAtB,IAA6CE,KAAK3B,MAAMI,SAAS,gBAAgB,gBAAjF,OACA,4BAAQsB,QAASC,KAAKJ,iBAAtB,IAA0C,OAA1C,QACA,4BAAQG,QAASC,KAAKH,iBAAtB,cAGF,uBAAG5B,UAAU,cACX,kBAAC,IAAD,CAAQJ,IAAI,gIACZC,MAAM,QACNC,OAAO,QACPC,GAAG,OACHC,UAAWL,EACXM,QAAQ,UACRC,SAAS,cAGX,yBAAKF,UAAU,cACb+B,KAAK3B,MAAMI,SAAS,KACtB,kBAAC,IAAD,CACAc,SAAUS,KAAKT,SACfU,MAAOD,KAAK3B,MAAME,QAKlB,uBAAGN,UAAU,cACV+B,KAAK3B,MAAMC,U,GAxGJ4B,IAAMC,WCZNC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.25ccfb25.chunk.js","sourcesContent":["\n\n\n\n\nimport React from 'react';\nimport './App.css';\nimport Iframe from 'react-iframe'\nimport Calendar from 'react-calendar';\n\n//Identificador del canal de ThingSpeak\nconst channelID=\"333785\";\n\nconst frameprops={\n  url:\"https://thingspeak.com/channels/333785/charts/1?bgcolor=%23ffffff&color=%23d62020&dynamic=true&results=60&type=line&update=15\",\n  width:\"450px\",\n  height:\"260px\",\n  id:\"myId\",\n  className:\"App\",\n  display:\"initial\",\n  position:\"relative\"};\n\n\n\n  class App extends React.Component{\n\n    state= {\n      num: 0,\n      date: new Date(),\n      isHidden: false\n    }\n\n    //Función para el botón\n    msg = () => {\n\n      //Crea objeto tipo XMLHttpRequest para acceder a ThingSpeak\n      var  xhr = new XMLHttpRequest();\n\n      //URL para leer última entrada en el canal de ThingSpeak\n      xhr.open('GET', \"https://api.thingspeak.com/channels/\"+channelID+\"/feeds/last.json\", true);\n\n      //Envía la petición\n      xhr.send();\n\n      //Función que se ejecutará cuando responda el servidor de ThingSpeak\n      xhr.onload = () => {\n        //Crea un objeto JSON con la respuesta del Servidor\n        var response=JSON.parse(xhr.responseText);\n\n        //Muestra en un cuadro de diálogo el valor del campo\n        alert(response.field1);\n\n      };\n\n      //Configura la función que se ejecutará si hay error al conectar servidor de ThingSpeak\n      xhr.onerror = ()=> {alert(\"No puedo conectarme a ThingSpeak :(\")}\n    }\n\n    onChange = (date) =>\n    {\n      var tempState=this.state;\n      tempState.date=date;\n      this.setState( {tempState} );\n      console.log(tempState);\n    }\n\n    handleIncrement = () =>{\n      var tempState=this.state;\n      tempState.num=tempState.num+1;\n      this.setState( tempState );\n      console.log(tempState);\n    }\n\n    handleDecrement = () =>{\n      var tempState=this.state;\n      tempState.num=tempState.num-1;\n      this.setState( tempState);\n      console.log(tempState);\n    }\n\n    handleHideCalendar = () =>{\n      var tempState=this.state;\n      tempState.isHidden=~tempState.isHidden;\n      this.setState( tempState);\n      console.log(tempState);\n    }\n\n\n\n\n\n    render() {\n      return (\n        //style={{display: 'flex',justifyContent:'center',alignItems: 'center' }}\n        <div >\n          <header className=\"App-header\">\n            <p>\n              Edit <code>src/App.js</code> and save to reload.\n            </p>\n          </header>\n\n          <p className=\"App-center\">\n            <button onClick={this.msg} > click me    </button>\n            <button onClick={this.handleHideCalendar} > {this.state.isHidden?\"Show Calendar\":\"Hide Calendar\"}   </button>\n            <button onClick={this.handleIncrement} > {\"Inc.\"}    </button>\n            <button onClick={this.handleDecrement} > Dec.    </button>\n          </p>\n\n          <p className=\"App-center\">\n            <Iframe url=\"https://thingspeak.com/channels/333785/charts/1?bgcolor=%23ffffff&color=%23d62020&dynamic=true&results=60&type=line&update=15\"\n            width=\"450px\"\n            height=\"260px\"\n            id=\"myId\"\n            className={frameprops}\n            display=\"initial\"\n            position=\"relative\"/>\n          </p>\n\n          <div className=\"App-center\">\n          { this.state.isHidden?null:\n          <Calendar\n          onChange={this.onChange}\n          value={this.state.date}\n          />\n        }\n        </div>\n\n          <p className=\"App-header\">\n            {this.state.num}\n          </p>\n        </div>\n\n      );\n    }\n\n  }\n\n\n  export default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
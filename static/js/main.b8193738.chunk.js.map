{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","num","date","Date","isHidden","sidebarOpen","xhr","XMLHttpRequest","open","send","onload","response","JSON","parse","responseText","alert","feeds","length","onerror","tempState","this","setState","console","log","sidebar","onSetOpen","onSetSidebarOpen","styles","background","className","onClick","msg","handleHideCalendar","handleIncrement","handleDecrement","url","width","height","id","display","position","onChange","value","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4TA8KiBA,G,iNAnJfC,MAAO,CACLC,IAAK,EACLC,KAAM,IAAIC,KACVC,UAAU,EACVC,aAAa,G,qEAOX,IAAKC,EAAM,IAAIC,eAMfD,EAAIE,KAAK,MAAO,+GAAsH,GAGtIF,EAAIG,OAGJH,EAAII,OAAS,WAEX,IAAIC,EAASC,KAAKC,MAAMP,EAAIQ,cAG5BC,MAAMJ,EAASK,MAAMC,SAKvBX,EAAIY,QAAU,WAAMH,MAAM,0C,+BAIlBb,GAGR,IAAIiB,EAAUC,KAAKpB,MACnBmB,EAAUjB,KAAKA,EACfkB,KAAKC,SAAU,CAACF,cAChBG,QAAQC,IAAIJ,K,wCAIZ,IAAIA,EAAUC,KAAKpB,MACnBmB,EAAUlB,IAAIkB,EAAUlB,IAAI,EAC5BmB,KAAKC,SAAUF,GACfG,QAAQC,IAAIJ,K,wCAIZ,IAAIA,EAAUC,KAAKpB,MACnBmB,EAAUlB,IAAIkB,EAAUlB,IAAI,EAC5BmB,KAAKC,SAAUF,GACfG,QAAQC,IAAIJ,K,2CAIZ,IAAIA,EAAUC,KAAKpB,MACnBmB,EAAUf,UAAUe,EAAUf,SAC9BgB,KAAKC,SAAUF,GACfG,QAAQC,IAAIJ,K,uCAIGX,GACf,IAAIW,EAAUC,KAAKpB,MACnBmB,EAAUd,YAAYG,EACtBY,KAAKC,SAAUF,GACfG,QAAQC,IAAIJ,K,+BAQJ,IAAD,OACP,OAIE,+CAEA,kBAAC,IAAD,CACAK,QAEE,6BACA,gDACA,iDAIFhB,KAAMY,KAAKpB,MAAMK,YACjBoB,UAAW,kBAAI,EAAKC,kBAAiB,IACrCC,OAAQ,CAAEH,QAAS,CAAEI,WAAY,WAIjC,4BAAQC,UAAU,cAClB,iFACgD,4CADhD,8BAMA,uBAAGA,UAAU,cACb,4BAAQC,QAAS,kBAAM,EAAKJ,kBAAiB,KAA7C,sCACA,4BAAQI,QAAS,kBAAI,EAAKC,QAA1B,wBACA,4BAAQD,QAAS,kBAAI,EAAKE,uBAA1B,IAAmDZ,KAAKpB,MAAMI,SAAS,qBAAqB,sBAA5F,OACA,4BAAQ0B,QAAS,kBAAI,EAAKG,oBAA1B,IAAgD,OAAhD,QACA,4BAAQH,QAAS,kBAAI,EAAKI,oBAA1B,cAGA,uBAAGL,UAAU,cACb,kBAAC,IAAD,CAAQM,IAAI,gIACZC,MAAM,QACNC,OAAO,QACPC,GAAG,OACHC,QAAQ,UACRC,SAAS,cAGT,uBAAGX,UAAU,cACXT,KAAKpB,MAAMI,SAAS,KACpB,kBAAC,IAAD,CACAqC,SAAU,kBAAI,EAAKA,YACnBC,MAAOtB,KAAKpB,MAAME,QAKpB,uBAAG2B,UAAU,cACZT,KAAKpB,MAAMC,W,GA9IF0C,IAAMC,YCTJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.b8193738.chunk.js","sourcesContent":["//Aplicación WEB base para Proyecto CDIO 1\n//Alexander López-Parrado PhD, (2019)\n\n\n\n//Módulos necesarios\nimport React from 'react'; //React\nimport Iframe from 'react-iframe' //Frame para mostrar gráfica de ThingSpeak\nimport Calendar from 'react-calendar'; //Calendario\nimport Sidebar from 'react-sidebar'; //Menú lateral\n\n//Importa aoja de estilos\nimport './App.css';\n\n//Identificador del canal de ThingSpeak\nconst channelID=\"333785\";\n\n\n\n\n//Clase principal definiendo la Aplicación\nclass App extends React.Component{\n\n\n\n\n  //objeto state que define el estado de la Aplicación\n  state= {\n    num: 0, //Contador\n    date: new Date(), //Fecha del calendario\n    isHidden: true, //Bandera que controla la visualización del calendario\n    sidebarOpen: false //Bandera que controla la visualización del menú lateral\n   }\n\n    //Método que se ejecutará cuando se presiona el botón Leer ThingSpeak\n    msg () {\n\n      //Crea objeto tipo XMLHttpRequest para acceder a ThingSpeak\n      var  xhr = new XMLHttpRequest();\n\n      //URL para leer última entrada en el canal de ThingSpeak\n      //xhr.open('GET', \"https://api.thingspeak.com/channels/\"+channelID+\"/feeds/last.json\", true);\n\n      //URL para leer todas las entradas entre las 9:10 AM del 22 de agosto de 2019 y las 11:11 del 22 de agosto de 2019\n      xhr.open('GET', \"https://api.thingspeak.com/channels/\"+channelID+\"/feeds.json?start=2019-08-22%2009:10:10&end=2019-08-23%2011:11:11\", true);\n\n      //Envía la petición\n      xhr.send();\n\n      //Función que se ejecutará cuando responda el servidor de ThingSpeak\n      xhr.onload = () => {\n        //Crea un objeto JSON con la respuesta del Servidor\n        var response=JSON.parse(xhr.responseText);\n\n        //Muestra en un cuadro de diálogo el valor del campo\n        alert(response.feeds.length);\n\n      };\n\n      //Configura la función que se ejecutará si hay error al conectar servidor de ThingSpeak\n      xhr.onerror = ()=> {alert(\"No puedo conectarme a ThingSpeak :(\")}\n    }\n\n    //Método que se ejecutará cuando se modifique la fecha en el calendario\n    onChange (date)\n    {\n      //Copia el estado en una variable auxiliar, modifica el miembro date y actualiza el estado\n      var tempState=this.state;\n      tempState.date=date;\n      this.setState( {tempState} );\n      console.log(tempState);\n    }\n\n    handleIncrement(){\n      var tempState=this.state;\n      tempState.num=tempState.num+1;\n      this.setState( tempState );\n      console.log(tempState);\n    }\n\n    handleDecrement (){\n      var tempState=this.state;\n      tempState.num=tempState.num-1;\n      this.setState( tempState);\n      console.log(tempState);\n    }\n\n    handleHideCalendar (){\n      var tempState=this.state;\n      tempState.isHidden=!tempState.isHidden;\n      this.setState( tempState);\n      console.log(tempState);\n    }\n\n\n    onSetSidebarOpen(open) {\n      var tempState=this.state;\n      tempState.sidebarOpen=open;\n      this.setState( tempState);\n      console.log(tempState);\n    }\n\n\n\n\n\n\n    render() {\n      return (\n        //Acá inicia el documento con la descripción de los elementos de la página WEB usando JSX\n\n        //Divisor\n        <div >\n        //Barra lateral\n        <Sidebar\n        sidebar={\n          //Documento con la descripción de los elementos de la barra lateral\n          <div>\n          <p>Sidebar content 1</p>\n          <p>Sidebar content 2</p>\n\n          </div>\n        }\n        open={this.state.sidebarOpen}\n        onSetOpen={()=>this.onSetSidebarOpen(false)}\n        styles={{ sidebar: { background: \"white\" } }}\n        >\n\n\n        <header className=\"App-header\">\n        <p>\n        Aplicación WEB Base para Proyecto CDIO 1 Editar <code>src/App.js</code> y guardar para recargar.\n        </p>\n        </header>\n\n\n        <p className=\"App-center\">\n        <button onClick={() => this.onSetSidebarOpen(true)}> Abrir Menú Lateral            </button>\n        <button onClick={()=>this.msg()} > Leer ThingSpeak    </button>\n        <button onClick={()=>this.handleHideCalendar()} > {this.state.isHidden?\"Mostrar Calendario\":\"Esconder Calendario\"}   </button>\n        <button onClick={()=>this.handleIncrement()} > {\"Inc.\"}    </button>\n        <button onClick={()=>this.handleDecrement()} > Dec.    </button>\n        </p>\n\n        <p className=\"App-center\">\n        <Iframe url=\"https://thingspeak.com/channels/333785/charts/1?bgcolor=%23ffffff&color=%23d62020&dynamic=true&results=60&type=line&update=15\"\n        width=\"450px\"\n        height=\"260px\"\n        id=\"myId\"\n        display=\"initial\"\n        position=\"relative\"/>\n        </p>\n\n        <p className=\"App-center\">\n        { this.state.isHidden?null:\n          <Calendar\n          onChange={()=>this.onChange()}\n          value={this.state.date}\n          />\n        }\n        </p>\n\n        <p className=\"App-header\">\n        {this.state.num}\n        </p>\n        </Sidebar>\n        </div>\n\n      );\n    }\n\n  }\n\n\n  export default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}